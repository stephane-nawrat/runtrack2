<!--  jour04/job01
D√©veloppez un algorithme qui aÔ¨Éche le nombre d‚Äôarguments $_GET.
Pour tester votre code, cr√©ez un formulaire html <form> de type GET avec diff√©rents
champs <input> de type ‚Äútext‚Äù et un <input> de type‚Äúsubmit‚Äù pour l‚Äôenvoi.
Vous pouvez ensuite aÔ¨Écher avec echo directement dans votre page par exemple :
‚ÄúLe nombre d‚Äôargument GET envoy√© est : ‚Äú
-->

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>R√©sultat du comptage</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <div class="container">
        
        <?php
        // ========================================
        // L'ALGORITHME (3 lignes essentielles)
        // ========================================
        
        // √âtape 1 : Compter les arguments re√ßus
        $nombre_arguments = count($_GET);
        
        // √âtape 2 : V√©rifier s'il y a des donn√©es
        if ($nombre_arguments > 0) {
            
            // √âtape 3a : Afficher le r√©sultat
            echo '<div class="resultat succes">';
            echo '<h2>‚úì R√©sultat</h2>';
            echo '<p class="nombre-grand">' . $nombre_arguments . '</p>';
            echo '<p>Le nombre d\'arguments GET envoy√© est : <strong>' . $nombre_arguments . '</strong></p>';
            echo '</div>';
            
            // Bonus : D√©tail des arguments
            echo '<div class="detail">';
            echo '<h3>D√©tail des arguments re√ßus :</h3>';
            echo '<ul>';
            foreach ($_GET as $nom_champ => $valeur_champ) {
                echo '<li>';
                echo '<span class="nom-champ">' . htmlspecialchars($nom_champ) . '</span> : ';
                echo '<span class="valeur-champ">' . htmlspecialchars($valeur_champ) . '</span>';
                echo '</li>';
            }
            echo '</ul>';
            echo '</div>';
            
        } else {
            
            // √âtape 3b : Aucune donn√©e re√ßue
            echo '<div class="resultat erreur">';
            echo '<h2>‚ö† Aucun argument</h2>';
            echo '<p>Vous n\'avez rempli aucun champ du formulaire.</p>';
            echo '<p>Le nombre d\'arguments GET est : <strong>0</strong></p>';
            echo '</div>';
            
        }
        ?>
        
        <div class="actions">
            <a href="formulaire.html" class="bouton-retour">‚Üê Retour au formulaire</a>
        </div>
        
    </div>
    
    
    
    
    <!-- ========================================
         EXPLICATION D√âTAILL√âE DU FONCTIONNEMENT
         ======================================== -->
    
    <div class="container" style="margin-top: 40px; background: #fafafa;">
        
        <h2>üìö Construction et fonctionnement de l'algorithme</h2>
        
        <h3>1. Qu'est-ce que $_GET ?</h3>
        <p>
            <strong>$_GET est un tableau</strong> (une liste organis√©e) qui contient automatiquement toutes les donn√©es 
            envoy√©es par un formulaire en m√©thode GET.
        </p>
        <p>
            Imaginez une bo√Æte aux lettres : quand quelqu'un remplit le formulaire et clique sur "Envoyer", 
            chaque champ rempli devient une lettre dans cette bo√Æte.
        </p>
        <p><strong>Exemple concret :</strong></p>
        <pre style="background: white; padding: 15px; border-left: 3px solid #333; font-family: monospace;">
Si l'utilisateur remplit :
- Pr√©nom : "Marie"
- Ville : "Lyon"

Alors $_GET contiendra :
$_GET = [
    'prenom' => 'Marie',
    'ville' => 'Lyon'
]
        </pre>
        
        <h3>2. La fonction count()</h3>
        <p>
            <strong>count()</strong> est une fonction PHP qui compte combien d'√©l√©ments il y a dans un tableau.
        </p>
        <p>
            C'est comme compter combien de lettres sont dans votre bo√Æte aux lettres.
        </p>
        <p><strong>Exemple :</strong></p>
        <pre style="background: white; padding: 15px; border-left: 3px solid #333; font-family: monospace;">
$_GET contient 2 √©l√©ments (prenom et ville)
count($_GET) retourne : 2
        </pre>
        
        <h3>3. La condition if/else</h3>
        <p>
            La structure <strong>if/else</strong> permet de prendre une d√©cision selon une condition.
        </p>
        <p><strong>En fran√ßais :</strong></p>
        <ul style="margin-left: 20px;">
            <li><strong>SI</strong> le nombre d'arguments est sup√©rieur √† 0 (il y a des donn√©es)</li>
            <li><strong>ALORS</strong> afficher le r√©sultat positif</li>
            <li><strong>SINON</strong> afficher un message d'erreur</li>
        </ul>
        
        <h3>4. Le parcours avec foreach</h3>
        <p>
            <strong>foreach</strong> est une boucle qui parcourt chaque √©l√©ment d'un tableau, un par un.
        </p>
        <p><strong>Analogie :</strong></p>
        <p>
            C'est comme ouvrir chaque lettre de votre bo√Æte aux lettres, une √† une, 
            pour lire l'exp√©diteur et le contenu.
        </p>
        <pre style="background: white; padding: 15px; border-left: 3px solid #333; font-family: monospace;">
foreach ($_GET as $nom => $valeur) {
    // Pour chaque √©l√©ment :
    // - $nom contient la cl√© (ex: "prenom")
    // - $valeur contient la valeur (ex: "Marie")
}
        </pre>
        
        <h3>5. Sch√©ma du flux de donn√©es</h3>
        <pre style="background: white; padding: 15px; border-left: 3px solid #333;">
FORMULAIRE (formulaire.html)
    ‚Üì
Utilisateur remplit et clique "Envoyer"
    ‚Üì
Donn√©es envoy√©es dans l'URL : ?prenom=Marie&ville=Lyon
    ‚Üì
PHP re√ßoit les donn√©es dans $_GET
    ‚Üì
count($_GET) compte : 2 √©l√©ments
    ‚Üì
Affichage : "Le nombre d'arguments GET est : 2"
        </pre>
        
        <h3>6. Point important : les champs vides</h3>
        <p>
            <strong>‚ö† Attention :</strong> Si un champ du formulaire reste vide, il n'est PAS envoy√©.
        </p>
        <p><strong>Exemple :</strong></p>
        <ul style="margin-left: 20px;">
            <li>Formulaire avec 5 champs</li>
            <li>L'utilisateur remplit seulement 3 champs</li>
            <li>$_GET contiendra seulement 3 √©l√©ments</li>
            <li>count($_GET) retournera 3, pas 5</li>
        </ul>
        
        <h3>7. Tester l'algorithme</h3>
        <p><strong>Sc√©narios √† essayer :</strong></p>
        <ol style="margin-left: 20px;">
            <li>Remplir tous les champs ‚Üí devrait afficher 5</li>
            <li>Remplir seulement pr√©nom et nom ‚Üí devrait afficher 2</li>
            <li>Ne remplir aucun champ ‚Üí devrait afficher 0 avec un message d'erreur</li>
            <li>Remplir un seul champ ‚Üí devrait afficher 1</li>
        </ol>
        
        <h3>8. R√©sum√© en une phrase</h3>
        <p style="background: white; padding: 15px; border-left: 3px solid #333; font-weight: bold;">
            L'algorithme compte combien de cases ont √©t√© remplies dans le formulaire 
            en utilisant count() sur le tableau $_GET qui contient toutes les donn√©es envoy√©es.
        </p>
        
    </div>
    
</body>
</html>